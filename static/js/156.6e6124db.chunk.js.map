{"version":3,"file":"static/js/156.6e6124db.chunk.js","mappings":"sNAAaA,EAAmB,SAAAC,GAAK,OAAIA,EAAMC,WAAWC,KAArB,E,mBCExBC,EAAQC,EAAAA,GAAAA,MAAH,0PAED,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,GAAGC,SAAf,IACP,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,KAAnB,IAWCC,EAAeP,EAAAA,GAAAA,GAAH,qSAQH,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,OAAOG,KAAnB,IACP,SAAAP,GAAC,OAAKA,EAAEQ,KAAO,OAAS,QAAvB,IASJC,EAASV,EAAAA,GAAAA,GAAH,yTAiBNW,EAAWX,EAAAA,GAAAA,GAAH,+KAKV,SAAAC,GACP,OAAQA,EAAEW,MACR,IAAK,SACH,OAAOX,EAAEC,MAAMG,OAAOQ,QACxB,IAAK,UACH,OAAOZ,EAAEC,MAAMG,OAAOS,OACxB,QACE,OAAOb,EAAEC,MAAMG,OAAOC,MAE3B,IACc,SAAAL,GAAC,OAAKA,EAAEW,KAAO,MAAQ,KAAtB,IACF,SAAAX,GAAC,OAAKA,EAAEQ,KAAO,OAAS,QAAvB,I,SC7DJM,EAAmB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcnB,EAAiB,EAAjBA,WACzCoB,EAAUD,EAAaE,OAAS,GAAKrB,EAAWqB,OAAS,EACzDC,EAAgB,SAAAC,GACpB,IAAMC,EAAa,IAAIC,KAAKF,GACtBG,EAAMF,EAAWG,UAAUC,WAAWC,SAAS,EAAG,KAClDC,GAASN,EAAWO,WAAa,GAAGH,WAAWC,SAAS,EAAG,KAC3DG,EAAOR,EAAWS,cAAcL,WAAWM,MAAM,GAEvD,MAAM,GAAN,OAAUR,EAAV,YAAiBI,EAAjB,YAA0BE,EAC3B,EACD,OACEZ,IACE,UAAClB,EAAD,YACE,4BACE,2BACE,SAACQ,EAAD,oBACA,SAACA,EAAD,oBACA,SAACA,EAAD,CAAcE,MAAI,EAAlB,uBACA,SAACF,EAAD,CAAcE,MAAI,EAAlB,sBACA,SAACF,EAAD,mBACA,SAACA,EAAD,4BAGJ,2BACGS,EAAagB,KACZ,gBACEC,EADF,EACEA,GACAC,EAFF,EAEEA,gBACAtB,EAHF,EAGEA,KACAuB,EAJF,EAIEA,WACAC,EALF,EAKEA,QACAC,EANF,EAMEA,OACAC,EAPF,EAOEA,aAPF,OASE,UAAC5B,EAAD,YACE,SAACC,EAAD,UAAWQ,EAAce,MACzB,SAACvB,EAAD,UAAoB,WAATC,EAAoB,IAAM,OACrC,SAACD,EAAD,CAAUF,MAAI,EAAd,SACGZ,EAAW0C,MAAK,SAAAC,GAAQ,OAAIA,EAASP,KAAOE,CAApB,IAAgCM,QAE3D,SAAC9B,EAAD,CAAUF,MAAI,EAAd,SAAgB2B,KAChB,SAACzB,EAAD,CAAUC,KAAMA,EAAhB,SAAuB8B,KAAKC,IAAIN,GAAQO,QAAQ,MAChD,SAACjC,EAAD,UAAW2B,EAAaM,QAAQ,OARrBX,EATf,QAyBX,E,2DC9CYY,G,QAAsB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC9BjD,GAAakD,EAAAA,EAAAA,IAAYpD,GAC/B,GAA8CqD,EAAAA,EAAAA,UAAS,IAAvD,eAAOd,EAAP,KAAwBe,EAAxB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAmBC,EAAAA,GAAW,CAClChB,OAAQgB,EAAAA,GACE,8BACPC,SAAS,wBAMd,GAAkEC,EAAAA,EAAAA,IAAU,CAC1EC,cAAe,CACb5C,MAAM,EACNuB,WAAY,GACZC,QAAS,GACTC,OAAQ,IAEVe,iBAAAA,EACAK,SAAU,YAA4C,IAAzC7C,EAAwC,EAAxCA,KAAMuB,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAChCqB,EAAiB,CACrBxB,gBAAAA,EACAtB,KAAMA,EAAO,UAAY,SACzBuB,WAAYA,GAER,uCACJC,QAAAA,EACAC,OAAQzB,GAAQ+C,OAAOtB,GAAUsB,OAAOtB,IAG1CuB,QAAQC,IAAIH,GAEZR,GAASY,EAAAA,EAAAA,IAAeJ,IAExBK,GACD,IAxBKC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,OAAQC,EAA9B,EAA8BA,aAAcC,EAA5C,EAA4CA,OAAQJ,EAApD,EAAoDA,UA2BpD,OACE,iCACE,6CACA,kBAAMN,SAAUO,EAAcI,aAAa,MAA3C,WACE,8BACE,sCACA,kBACExD,KAAK,WACL6B,KAAK,OACL4B,MAAOJ,EAAOrD,KACd0D,SAAUJ,KAEZ,yCAEDD,EAAOrD,OACN,+BACE,mBAAQ6B,KAAK,aAAa6B,SAAUJ,EAAcZ,UAAQ,EAA1D,SACGzD,EAAW0E,QACV,SAACC,EAAKC,GAQJ,MAPsB,WAAlBA,EAAS7D,MACX4D,EAAIE,MACF,mBAA0BL,MAAOI,EAASxC,GAA1C,SACGwC,EAAShC,MADCgC,EAASxC,KAKnBuC,CACR,GACD,EACE,mBAAgBH,MAAM,GAAtB,4BAAY,YAuBtB,4BACE,kBACEzD,KAAK,OACL+D,YAAY,OACZlC,KAAK,SACL4B,MAAOJ,EAAO5B,OACdiC,SAAUJ,EACVZ,UAAQ,IAETa,EAAO9B,SAAU,yBAAM8B,EAAO9B,UAC/B,SAAC,IAAD,CACEzB,KAAK,OACL6B,KAAK,kBACL4B,MAAOJ,EAAO/B,gBACdoC,SAAU,SAAAM,GA/FlB3B,EAgGqB2B,EAhGGC,GAiGf,QAGL,kBACEjE,KAAK,OACL+D,YAAY,UACZlC,KAAK,UACL4B,MAAOJ,EAAO7B,QACdkC,SAAUJ,KAEZ,mBAAQtD,KAAK,SAAb,kBACA,mBAAQA,KAAK,SAAb,qBACA,mBAAQA,KAAK,SAASkE,QAAShC,EAA/B,UACE,SAAC,MAAD,WAKT,G,oBC/FD,EA/BiB,WACf,OAAsCE,EAAAA,EAAAA,WAAS,GAA/C,eAAO+B,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,GAAS,sBACpBlE,GAAe+B,EAAAA,EAAAA,IAAYoC,EAAAA,IAC3BtF,GAAakD,EAAAA,EAAAA,IAAYpD,GACzBuD,GAAWC,EAAAA,EAAAA,OACjBiC,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,KACV,GAAE,CAACnC,IAMJ,OACE,gCACG+B,IAAY,SAACK,EAAA,EAAD,KACb,SAACvE,EAAD,CAAkBC,aAAcA,EAAcnB,WAAYA,KAC1D,mBACEe,KAAK,SACLkE,QAAS,WACPE,GAAe,EAChB,EAJH,6BAQCD,IAAe,SAAClC,EAAD,CAAqBC,QAhBzB,WACdkC,GAAe,EAChB,MAiBF,C","sources":["redux/categories/categoriesSelectors.js","components/TransactionTable/TransactionsTable.styled.jsx","components/TransactionTable/TransactionTable.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const selectCategories = state => state.categories.items;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  border-collapse: collapse;\n  font-family: ${p => p.theme.ff.familyExo};\n  color: ${p => p.theme.colors.black};\n\n  @media screen and (min-width: 768px) {\n    width: 704px;\n    text-align: center;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 715px;\n  }\n`;\n\nexport const TableHeading = styled.th`\n  &:first-child {\n    border-radius: 30px 0 0 30px;\n  }\n  &:last-child {\n    border-radius: 0 30px 30px 0;\n  }\n  border: none;\n  background-color: ${p => p.theme.colors.white};\n  text-align: ${p => (p.left ? 'left' : 'center')};\n\n  padding: 16px 20px;\n\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const TrData = styled.tr`\n  position: relative;\n  font-size: 16px;\n\n  &:not(:last-child) {\n    &::after {\n      content: '';\n      position: absolute;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      border: 1px solid #dcdcdf;\n      box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n    }\n  }\n`;\n\nexport const StyledTd = styled.td`\n  padding-left: 20px;\n  padding-right: 20px;\n  height: 52px;\n  line-height: calc(18 / 16);\n  color: ${p => {\n    switch (p.type) {\n      case 'INCOME':\n        return p.theme.colors.btGreen;\n      case 'EXPENSE':\n        return p.theme.colors.btPink;\n      default:\n        return p.theme.colors.black;\n    }\n  }};\n  font-weight: ${p => (p.type ? '700' : '400')};\n  text-align: ${p => (p.left ? 'left' : 'center')};\n`;\n","import {\n  Table,\n  TableHeading,\n  TrData,\n  StyledTd,\n} from './TransactionsTable.styled';\nexport const TransactionTable = ({ transactions, categories }) => {\n  const isShown = transactions.length > 0 && categories.length > 0;\n  const transformDate = date => {\n    const dateString = new Date(date);\n    const day = dateString.getDate().toString().padStart(2, '0');\n    const month = (dateString.getMonth() + 1).toString().padStart(2, '0');\n    const year = dateString.getFullYear().toString().slice(2);\n\n    return `${day}.${month}.${year}`;\n  };\n  return (\n    isShown && (\n      <Table>\n        <thead>\n          <tr>\n            <TableHeading>Date</TableHeading>\n            <TableHeading>Type</TableHeading>\n            <TableHeading left>Category</TableHeading>\n            <TableHeading left>Comment</TableHeading>\n            <TableHeading>Sum</TableHeading>\n            <TableHeading>Balance</TableHeading>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(\n            ({\n              id,\n              transactionDate,\n              type,\n              categoryId,\n              comment,\n              amount,\n              balanceAfter,\n            }) => (\n              <TrData key={id}>\n                <StyledTd>{transformDate(transactionDate)}</StyledTd>\n                <StyledTd>{type === 'INCOME' ? '+' : '-'}</StyledTd>\n                <StyledTd left>\n                  {categories.find(category => category.id === categoryId).name}\n                </StyledTd>\n                <StyledTd left>{comment}</StyledTd>\n                <StyledTd type={type}>{Math.abs(amount).toFixed(2)}</StyledTd>\n                <StyledTd>{balanceAfter.toFixed(2)}</StyledTd>\n              </TrData>\n            )\n          )}\n        </tbody>\n      </Table>\n    )\n  );\n};\n","import { GrClose } from 'react-icons/gr';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { addTransaction } from 'redux/transactions/transactionOperation';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n\nexport const ModalAddTransaction = ({ onClose }) => {\n  const categories = useSelector(selectCategories);\n  const [transactionDate, setTransactionDate] = useState('');\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object({\n    amount: yup\n      .number('Please, enter only numbers')\n      .required('Amount is required'),\n  });\n\n  const changeDate = date => {\n    setTransactionDate(date._d);\n  };\n  const { handleSubmit, values, handleChange, errors, resetForm } = useFormik({\n    initialValues: {\n      type: false,\n      categoryId: '',\n      comment: '',\n      amount: '',\n    },\n    validationSchema,\n    onSubmit: ({ type, categoryId, comment, amount }) => {\n      const newTransaction = {\n        transactionDate,\n        type: type ? 'EXPENSE' : 'INCOME',\n        categoryId: categoryId\n          ? categoryId\n          : '063f1132-ba5d-42b4-951d-44011ca46262',\n        comment,\n        amount: type ? -Number(amount) : Number(amount),\n      };\n\n      console.log(newTransaction);\n\n      dispatch(addTransaction(newTransaction));\n\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <h2>Add transaction</h2>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <span>Income</span>\n          <input\n            type=\"checkbox\"\n            name=\"type\"\n            value={values.type}\n            onChange={handleChange}\n          />\n          <span>Expense</span>\n        </label>\n        {values.type && (\n          <>\n            <select name=\"categoryId\" onChange={handleChange} required>\n              {categories.reduce(\n                (acc, categori) => {\n                  if (categori.type !== 'INCOME') {\n                    acc.push(\n                      <option key={categori.id} value={categori.id}>\n                        {categori.name}\n                      </option>\n                    );\n                  }\n                  return acc;\n                },\n                [\n                  <option key=\"1\" value=\"\">\n                    Select Category\n                  </option>,\n                ]\n              )}\n            </select>\n            {/* <input\n              list=\"category\"\n              placeholder=\"Select a category\"\n              name=\"categoryName\"\n              onChange={handleChange}\n            />\n            <datalist id=\"category\">\n              {categories.reduce((acc, categori) => {\n                if (categori.type !== 'INCOME') {\n                  acc.push(<option key={categori.id} value={categori.name} />);\n                }\n                return acc;\n              }, [])}\n            </datalist> */}\n          </>\n        )}\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"0.00\"\n            name=\"amount\"\n            value={values.amount}\n            onChange={handleChange}\n            required\n          />\n          {errors.amount && <div>{errors.amount}</div>}\n          <Datetime\n            type=\"date\"\n            name=\"transactionDate\"\n            value={values.transactionDate}\n            onChange={evt => {\n              changeDate(evt);\n            }}\n          />\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Comment\"\n          name=\"comment\"\n          value={values.comment}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">ADD</button>\n        <button type=\"button\">CANCEL</button>\n        <button type=\"button\" onClick={onClose}>\n          <GrClose />\n        </button>\n      </form>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategories } from 'redux/categories/categoriesOperations';\nimport { selectTransaction } from 'redux/transactions/transactionSelectors';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { TransactionTable } from 'components/TransactionTable/TransactionTable';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useState } from 'react';\nimport { useMedia } from 'react-use';\nimport { Balance } from 'components/Balance/Balance';\n\nconst HomePage = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const isMobile = useMedia('(max-width: 767px)');\n  const transactions = useSelector(selectTransaction);\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  const onClose = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      {isMobile && <Balance />}\n      <TransactionTable transactions={transactions} categories={categories} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setModalIsOpen(true);\n        }}\n      >\n        add transaction\n      </button>\n      {modalIsOpen && <ModalAddTransaction onClose={onClose} />}\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["selectCategories","state","categories","items","Table","styled","p","theme","ff","familyExo","colors","black","TableHeading","white","left","TrData","StyledTd","type","btGreen","btPink","TransactionTable","transactions","isShown","length","transformDate","date","dateString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","map","id","transactionDate","categoryId","comment","amount","balanceAfter","find","category","name","Math","abs","toFixed","ModalAddTransaction","onClose","useSelector","useState","setTransactionDate","dispatch","useDispatch","validationSchema","yup","required","useFormik","initialValues","onSubmit","newTransaction","Number","console","log","addTransaction","resetForm","handleSubmit","values","handleChange","errors","autoComplete","value","onChange","reduce","acc","categori","push","placeholder","evt","_d","onClick","modalIsOpen","setModalIsOpen","isMobile","useMedia","selectTransaction","useEffect","getCategories","Balance"],"sourceRoot":""}