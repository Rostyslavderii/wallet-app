{"version":3,"file":"static/js/187.1b7018b5.chunk.js","mappings":"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","sources":["redux/categories/categoriesSelectors.js","components/TransactionTable/TransactionsTable.styled.jsx","helpers/transformDate.js","components/TransactionTable/TransactionTable.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","components/AddTransaction/AddTransactionBtn.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const selectCategories = state => state.categories.items;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","import styled from 'styled-components';\n\nconst switchColor = ({ type, theme: { colors } }) => {\n  switch (type) {\n    case 'INCOME':\n      return colors.btGreen;\n    case 'EXPENSE':\n      return colors.btPink;\n    default:\n      return colors.black;\n  }\n};\n\nexport const Table = styled.table`\n  width: 100%;\n  max-width: 320px;\n  margin: 0 auto;\n  border-collapse: collapse;\n  font-family: ${p => p.theme.ff.familyExo};\n  color: ${p => p.theme.colors.black};\n\n  @media screen and (min-width: 768px) {\n    max-width: 704px;\n    text-align: center;\n  }\n  @media screen and (min-width: 1280px) {\n    margin-top: 46px;\n    margin-right: 0;\n    max-width: 715px;\n  }\n`;\n\nexport const TableHeading = styled.th`\n  &:first-child {\n    border-radius: 30px 0 0 30px;\n  }\n  &:last-child {\n    border-radius: 0 30px 30px 0;\n  }\n  border: none;\n  background-color: ${p => p.theme.colors.white};\n  text-align: ${p => (p.left ? 'left' : 'center')};\n\n  padding: 16px 20px;\n\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const TrData = styled.tr`\n  @media screen and (max-width: 767px) {\n    display: flex;\n    flex-direction: column;\n    &:not(:last-child) {\n      margin-bottom: 8px;\n    }\n    background-color: ${p => p.theme.colors.white};\n    border-radius: 10px;\n    border-left: 5px solid ${switchColor};\n  }\n\n  position: relative;\n  font-size: 16px;\n  @media screen and (min-width: 768px) {\n    &:not(:last-child) {\n      &::after {\n        content: '';\n        position: absolute;\n        left: 0;\n        bottom: 0;\n        width: 100%;\n        border: 1px solid #dcdcdf;\n        box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.6);\n      }\n    }\n  }\n`;\n\nexport const StyledTd = styled.td`\n  @media screen and (max-width: 767px) {\n    display: flex;\n    justify-content: space-between;\n    flex-grow: 1;\n    width: 100%;\n    align-items: center;\n    &:not(:last-child) {\n      border-bottom: 1px solid #dcdcdf;\n    }\n  }\n  padding: 8px 20px;\n  height: 52px;\n  line-height: calc(18 / 16);\n  color: ${switchColor};\n  font-weight: ${p => (p.type ? '700' : '400')};\n  text-align: ${p => (p.left ? 'left' : 'center')};\n`;\n\nexport const DataHeading = styled.span`\n  color: ${p => p.theme.colors.black};\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 1.5;\n`;\n\nexport const DataValue = styled.span`\n  @media screen and (max-width: 767px) {\n    text-align: end;\n    justify-content: end;\n  }\n  display: inline-flex;\n  margin-left: auto;\n  width: 130px;\n  max-height: 36px;\n  overflow: hidden scroll;\n  &::-webkit-scrollbar {\n    width: ${p => (p.isScrollShown ? '4px' : '0')};\n  }\n  &::-webkit-scrollbar-track {\n    background-color: ${p => p.theme.colors.lPurple};\n    border-radius: 2px;\n  }\n  &::-webkit-scrollbar-thumb {\n    background-color: ${p => p.theme.colors.lBlue};\n    border-radius: 2px;\n  }\n  scrollbar-color: ${p => p.theme.colors.lBlue} ${p => p.theme.colors.lPurple};\n`;\n","export const transformDate = date => {\n  const dateString = new Date(date);\n  const day = dateString.getDate().toString().padStart(2, '0');\n  const month = (dateString.getMonth() + 1).toString().padStart(2, '0');\n  const year = dateString.getFullYear().toString().slice(2);\n\n  return `${day}.${month}.${year}`;\n};\n","import {\n  Table,\n  TableHeading,\n  TrData,\n  StyledTd,\n  DataHeading,\n  DataValue,\n} from './TransactionsTable.styled';\nimport { transformDate } from 'helpers/transformDate';\nimport { useMedia } from 'react-use';\n\nexport const TransactionTable = ({ transactions, categories }) => {\n  const isShown = transactions.length > 0 && categories.length > 0;\n  const isMobile = useMedia('(max-width: 767px)');\n  const sortedTransactions = [...transactions].sort(\n    (prevTr, nextTr) =>\n      Date.parse(nextTr.transactionDate) - Date.parse(prevTr.transactionDate)\n  );\n\n  return (\n    isShown && (\n      <Table>\n        {!isMobile && (\n          <thead>\n            <tr>\n              <TableHeading>Date</TableHeading>\n              <TableHeading>Type</TableHeading>\n              <TableHeading left>Category</TableHeading>\n              <TableHeading left>Comment</TableHeading>\n              <TableHeading>Sum</TableHeading>\n              <TableHeading>Balance</TableHeading>\n            </tr>\n          </thead>\n        )}\n        <tbody>\n          {sortedTransactions.map(\n            ({\n              id,\n              transactionDate,\n              type,\n              categoryId,\n              comment,\n              amount,\n              balanceAfter,\n            }) => (\n              <TrData key={id} type={type}>\n                <StyledTd>\n                  {isMobile && <DataHeading>Date</DataHeading>}\n                  {transformDate(transactionDate)}\n                </StyledTd>\n                <StyledTd>\n                  {isMobile && <DataHeading>Type</DataHeading>}\n                  {type === 'INCOME' ? '+' : '-'}\n                </StyledTd>\n                <StyledTd left>\n                  {isMobile && <DataHeading>Category</DataHeading>}\n                  {categories.find(category => category.id === categoryId).name}\n                </StyledTd>\n                <StyledTd left>\n                  {isMobile && <DataHeading>Comment</DataHeading>}\n                  <DataValue isScrollShown={comment.length > 30}>\n                    {comment}\n                  </DataValue>\n                </StyledTd>\n                <StyledTd type={type}>\n                  {isMobile && <DataHeading>Sum</DataHeading>}\n                  {Math.abs(amount).toFixed(2)}\n                </StyledTd>\n                <StyledTd>\n                  {isMobile && <DataHeading>Balance</DataHeading>}\n                  {balanceAfter.toFixed(2)}\n                </StyledTd>\n              </TrData>\n            )\n          )}\n        </tbody>\n      </Table>\n    )\n  );\n};\n","import { GrClose } from 'react-icons/gr';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { addTransaction } from 'redux/transactions/transactionOperation';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n\nexport const ModalAddTransaction = ({ onClose }) => {\n  const categories = useSelector(selectCategories);\n  const [transactionDate, setTransactionDate] = useState('');\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object({\n    amount: yup\n      .number('Please, enter only numbers')\n      .required('Amount is required'),\n  });\n\n  const changeDate = date => {\n    setTransactionDate(date._d);\n  };\n  const { handleSubmit, values, handleChange, errors, resetForm } = useFormik({\n    initialValues: {\n      type: false,\n      categoryId: '',\n      comment: '',\n      amount: '',\n    },\n    validationSchema,\n    onSubmit: ({ type, categoryId, comment, amount }) => {\n      const newTransaction = {\n        transactionDate,\n        type: type ? 'EXPENSE' : 'INCOME',\n        categoryId: categoryId\n          ? categoryId\n          : '063f1132-ba5d-42b4-951d-44011ca46262',\n        comment,\n        amount: type ? -Number(amount) : Number(amount),\n      };\n\n      console.log(newTransaction);\n\n      dispatch(addTransaction(newTransaction));\n\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <h2>Add transaction</h2>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <span>Income</span>\n          <input\n            type=\"checkbox\"\n            name=\"type\"\n            value={values.type}\n            onChange={handleChange}\n          />\n          <span>Expense</span>\n        </label>\n        {values.type && (\n          <>\n            <select name=\"categoryId\" onChange={handleChange} required>\n              {categories.reduce(\n                (acc, categori) => {\n                  if (categori.type !== 'INCOME') {\n                    acc.push(\n                      <option key={categori.id} value={categori.id}>\n                        {categori.name}\n                      </option>\n                    );\n                  }\n                  return acc;\n                },\n                [\n                  <option key=\"1\" value=\"\">\n                    Select Category\n                  </option>,\n                ]\n              )}\n            </select>\n            {/* <input\n              list=\"category\"\n              placeholder=\"Select a category\"\n              name=\"categoryName\"\n              onChange={handleChange}\n            />\n            <datalist id=\"category\">\n              {categories.reduce((acc, categori) => {\n                if (categori.type !== 'INCOME') {\n                  acc.push(<option key={categori.id} value={categori.name} />);\n                }\n                return acc;\n              }, [])}\n            </datalist> */}\n          </>\n        )}\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"0.00\"\n            name=\"amount\"\n            value={values.amount}\n            onChange={handleChange}\n            required\n          />\n          {errors.amount && <div>{errors.amount}</div>}\n          <Datetime\n            type=\"date\"\n            name=\"transactionDate\"\n            value={values.transactionDate}\n            onChange={evt => {\n              changeDate(evt);\n            }}\n          />\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Comment\"\n          name=\"comment\"\n          value={values.comment}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">ADD</button>\n        <button type=\"button\">CANCEL</button>\n        <button type=\"button\" onClick={onClose}>\n          <GrClose />\n        </button>\n      </form>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { AiOutlinePlus } from 'react-icons/ai';\n\nconst Icon = styled(AiOutlinePlus)`\n  width: 20px;\n  height: 20px;\n  fill: #fff;\n`;\n\nconst StyledBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 100%;\n\n  position: fixed;\n  right: 40px;\n  bottom: 40px;\n  width: 44px;\n  height: 44px;\n\n  background: #24cca7;\n\n  box-shadow: 0px 6px 15px rgba(36, 204, 167, 0.5);\n\n  @media (max-width: 768px) {\n    right: 20px;\n    bottom: 20px;\n  }\n`;\n\nexport const AddTransactionBtn = ({ onClick, ...attrs }) => {\n  return (\n    <StyledBtn onClick={onClick} {...attrs}>\n      <Icon />\n    </StyledBtn>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategories } from 'redux/categories/categoriesOperations';\nimport { selectTransaction } from 'redux/transactions/transactionSelectors';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { TransactionTable } from 'components/TransactionTable/TransactionTable';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useState } from 'react';\nimport { useMedia } from 'react-use';\nimport { Balance } from 'components/Balance/Balance';\nimport { AddTransactionBtn } from 'components/AddTransaction/AddTransactionBtn';\n\nconst HomePage = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n\n  const isMobile = useMedia('(max-width: 767px)');\n  const transactions = useSelector(selectTransaction);\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  const onClose = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      {isMobile && <Balance />}\n      <TransactionTable transactions={transactions} categories={categories} />\n      <AddTransactionBtn\n        type=\"button\"\n        onClick={() => {\n          setModalIsOpen(true);\n        }}\n      >\n        add transaction\n      </AddTransactionBtn>\n      {modalIsOpen && <ModalAddTransaction onClose={onClose} />}\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["selectCategories","state","categories","items","switchColor","type","colors","theme","btGreen","btPink","black","Table","styled","p","ff","familyExo","TableHeading","white","left","TrData","StyledTd","DataHeading","DataValue","isScrollShown","lPurple","lBlue","transformDate","date","dateString","Date","day","getDate","toString","padStart","month","getMonth","year","getFullYear","slice","TransactionTable","transactions","isShown","length","isMobile","useMedia","sortedTransactions","sort","prevTr","nextTr","parse","transactionDate","map","id","categoryId","comment","amount","balanceAfter","find","category","name","Math","abs","toFixed","ModalAddTransaction","onClose","useSelector","useState","setTransactionDate","dispatch","useDispatch","validationSchema","yup","required","useFormik","initialValues","onSubmit","newTransaction","Number","console","log","addTransaction","resetForm","handleSubmit","values","handleChange","errors","autoComplete","value","onChange","reduce","acc","categori","push","placeholder","evt","_d","onClick","Icon","AiOutlinePlus","StyledBtn","AddTransactionBtn","attrs","modalIsOpen","setModalIsOpen","selectTransaction","useEffect","getCategories","Balance"],"sourceRoot":""}