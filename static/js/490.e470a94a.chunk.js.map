{"version":3,"file":"static/js/490.e470a94a.chunk.js","mappings":"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","sources":["components/Chart/Chart.jsx","helpers/switchBgStatistic.js","redux/transactionsSummary/trSummarySelectors.js","components/Diagram/Diagram.jsx","pages/StatisticPage/StatisticPage.jsx"],"sourcesContent":["import { Chart as ChartJS, ArcElement, Tooltip } from 'chart.js';\nimport { switchBgStatistic } from 'helpers/switchBgStatistic';\nimport { useEffect } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport theme from 'utils/theme';\n// import { useSelector } from 'react-redux';\n// import { selectBalance } from 'redux/transactions/transactionSelectors';\n\nChartJS.register(ArcElement, Tooltip);\n\nexport const Chart = ({ trSummary }) => {\n    // const balance = useSelector(selectBalance);\n    const options = {\n        cutout: \"65%\"\n    }\n    const data = {\n        labels: [],\n        datasets: [\n            {\n                label: '# of Votes',\n                data: [],\n                backgroundColor: [],\n                borderColor: [\n                    'transparent',\n                ],\n            },\n        ],\n    };\n\n    useEffect(() => {\n        const chartInfoList = () => {\n            if (trSummary.categoriesSummary.length > 0) {\n\n                trSummary.categoriesSummary.forEach(({ name, type, total }) => {\n                    if (type === \"INCOME\") {\n                        return;\n                    }\n                    const bgColor = switchBgStatistic({ name, theme });\n                    const amount = Math.abs(total);\n                    const expence = Math.abs(trSummary.expenseSummary);\n                    data.datasets[0].backgroundColor.push(bgColor);\n                    data.labels.push(name);\n\n                    const totalTr = Math.round(amount / expence * 100);\n                    // console.log(\"totalTr\", totalTr);\n                    data.datasets[0].data.push(totalTr);\n                })\n            }\n        }\n\n        if (trSummary) {\n            chartInfoList()\n        }\n    }, [trSummary, data.datasets, data.labels])\n\n\n    return (\n        trSummary && <Doughnut redraw={true} options={options} data={data} height=\"288px\" width=\"288px\" />\n    )\n}\n","export const switchBgStatistic = ({ name, theme: { colors } }) => {\n    switch (name) {\n        case 'Main expenses':\n            return colors.yellow;\n        case 'Products':\n            return colors.lReddy;\n        case 'Car':\n            return colors.reddy;\n        case 'Self care':\n            return colors.lPurple;\n        case 'Child care':\n            return colors.lBlue;\n        case 'Household products':\n            return colors.btBlue;\n        case 'Education':\n            return colors.lBlight;\n        case 'Leisure':\n            return colors.lGreen;\n        case 'Entertainment':\n            return colors.btPink;\n        case 'Other expenses':\n            return colors.green;\n        default:\n            return colors.btBlue;\n    }\n};","export const selectTrSummary = state => state.trSummary.summary;\nexport const selectIsLoading = state => state.trSummary.isLoading;\nexport const selectError = state => state.trSummary.error;\n","import { Chart } from \"components/Chart/Chart\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { getTransactionsSummary } from \"redux/transactionsSummary/trSummaryOperations\";\nimport { selectError, selectTrSummary } from \"redux/transactionsSummary/trSummarySelectors\";\n\nexport const Diagram = () => {\n    const [month, setMonth] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n\n    const trSummary = useSelector(selectTrSummary);\n    const error = useSelector(selectError);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const fetchTransactionsSummary = ({ month, year }) => {\n            dispatch(getTransactionsSummary({ month, year }));\n        }\n\n        if (month && year) {\n            fetchTransactionsSummary({ month, year })\n        }\n\n    }, [month, year, dispatch])\n\n    const handleChange = ({ target: { name, value } }) => {\n        console.log(\"trSummary\", trSummary);\n        switch (name) {\n            case 'month':\n                setMonth(value);\n                break;\n            case 'year':\n                setYear(value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    return (\n        <>\n            <div>Diagram</div>\n            <div>\n                <Chart trSummary={trSummary} />\n                <select height=\"20\" onChange={handleChange} id=\"year\" name=\"year\">\n                    <option value=\"2022\">2022</option>\n                </select>\n            </div>\n            {error && <p>{error}</p>}\n        </>\n    )\n}","import { Diagram } from \"components/Diagram/Diagram\";\n\nconst StatisticPage = () => {\n  return <>\n    <div>Statistic page</div>\n    <Diagram />\n  </>;\n\n};\n\nexport default StatisticPage;\n"],"names":["ChartJS","ArcElement","Tooltip","Chart","trSummary","data","labels","datasets","label","backgroundColor","borderColor","useEffect","categoriesSummary","length","forEach","name","type","total","bgColor","colors","theme","yellow","lReddy","reddy","lPurple","lBlue","btBlue","lBlight","lGreen","btPink","green","switchBgStatistic","amount","Math","abs","expence","expenseSummary","push","totalTr","round","redraw","options","cutout","height","width","selectTrSummary","state","summary","selectError","error","Diagram","useState","month","setMonth","year","setYear","useSelector","dispatch","useDispatch","getTransactionsSummary","fetchTransactionsSummary","onChange","target","value","console","log","id"],"sourceRoot":""}