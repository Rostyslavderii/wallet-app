{"version":3,"file":"static/js/794.2bff787f.chunk.js","mappings":"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","sources":["redux/categories/categoriesSelectors.js","components/TransactionTable/TransactionTable.jsx","components/ModalAddTransaction/ModalAddTransaction.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const selectCategories = state => state.categories.items;\nexport const selectIsLoading = state => state.categories.isLoading;\nexport const selectError = state => state.categories.error;\n","export const TransactionTable = ({ transactions, categories }) => {\n  const isShown = transactions.length > 0 && categories.length > 0;\n  return (\n    isShown && (\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Type</th>\n            <th>Category</th>\n            <th>Comment</th>\n            <th>Sum</th>\n            <th>Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map(\n            ({\n              id,\n              transactionDate,\n              type,\n              categoryId,\n              comment,\n              amount,\n              balanceAfter,\n            }) => (\n              <tr key={id}>\n                <td>{transactionDate}</td>\n                <td>{type === 'INCOME' ? '+' : '-'}</td>\n                <td>\n                  {categories.find(category => category.id === categoryId).name}\n                </td>\n                <td>{comment}</td>\n                <td>{amount}</td>\n                <td>{balanceAfter}</td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    )\n  );\n};\n","import { GrClose } from 'react-icons/gr';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { addTransaction } from 'redux/transactions/transactionOperation';\nimport Datetime from 'react-datetime';\nimport 'react-datetime/css/react-datetime.css';\n\nexport const ModalAddTransaction = ({ onClose }) => {\n  const categories = useSelector(selectCategories);\n  const [transactionDate, setTransactionDate] = useState('');\n  const dispatch = useDispatch();\n\n  const validationSchema = yup.object({\n    amount: yup\n      .number('Please, enter only numbers')\n      .required('Amount is required'),\n  });\n\n  const changeDate = date => {\n    setTransactionDate(date._d);\n  };\n  const { handleSubmit, values, handleChange, errors, resetForm } = useFormik({\n    initialValues: {\n      type: false,\n      categoryId: '',\n      comment: '',\n      amount: '',\n    },\n    validationSchema,\n    onSubmit: ({ type, categoryId, comment, amount }) => {\n      const newTransaction = {\n        transactionDate,\n        type: type ? 'EXPENSE' : 'INCOME',\n        categoryId: categoryId\n          ? categoryId\n          : '063f1132-ba5d-42b4-951d-44011ca46262',\n        comment,\n        amount: type ? -Number(amount) : Number(amount),\n      };\n\n      console.log(newTransaction);\n\n      dispatch(addTransaction(newTransaction));\n\n      resetForm();\n    },\n  });\n\n  return (\n    <>\n      <h2>Add transaction</h2>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <span>Income</span>\n          <input\n            type=\"checkbox\"\n            name=\"type\"\n            value={values.type}\n            onChange={handleChange}\n          />\n          <span>Expense</span>\n        </label>\n        {values.type && (\n          <>\n            <select name=\"categoryId\" onChange={handleChange} required>\n              {categories.reduce(\n                (acc, categori) => {\n                  if (categori.type !== 'INCOME') {\n                    acc.push(\n                      <option key={categori.id} value={categori.id}>\n                        {categori.name}\n                      </option>\n                    );\n                  }\n                  return acc;\n                },\n                [\n                  <option key=\"1\" value=\"\">\n                    Select Category\n                  </option>,\n                ]\n              )}\n            </select>\n            {/* <input\n              list=\"category\"\n              placeholder=\"Select a category\"\n              name=\"categoryName\"\n              onChange={handleChange}\n            />\n            <datalist id=\"category\">\n              {categories.reduce((acc, categori) => {\n                if (categori.type !== 'INCOME') {\n                  acc.push(<option key={categori.id} value={categori.name} />);\n                }\n                return acc;\n              }, [])}\n            </datalist> */}\n          </>\n        )}\n\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"0.00\"\n            name=\"amount\"\n            value={values.amount}\n            onChange={handleChange}\n            required\n          />\n          {errors.amount && <div>{errors.amount}</div>}\n          <Datetime\n            type=\"date\"\n            name=\"transactionDate\"\n            value={values.transactionDate}\n            onChange={evt => {\n              changeDate(evt);\n            }}\n          />\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"Comment\"\n          name=\"comment\"\n          value={values.comment}\n          onChange={handleChange}\n        />\n        <button type=\"submit\">ADD</button>\n        <button type=\"button\">CANCEL</button>\n        <button type=\"button\" onClick={onClose}>\n          <GrClose />\n        </button>\n      </form>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCategories } from 'redux/categories/categoriesOperations';\nimport { selectTransaction } from 'redux/transactions/transactionSelectors';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\nimport { TransactionTable } from 'components/TransactionTable/TransactionTable';\nimport { ModalAddTransaction } from 'components/ModalAddTransaction/ModalAddTransaction';\nimport { useState } from 'react';\n\nconst HomePage = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const transactions = useSelector(selectTransaction);\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  const onClose = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <>\n      <TransactionTable transactions={transactions} categories={categories} />\n      <button\n        type=\"button\"\n        onClick={() => {\n          setModalIsOpen(true);\n        }}\n      >\n        add transaction\n      </button>\n      {modalIsOpen && <ModalAddTransaction onClose={onClose} />}\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["selectCategories","state","categories","items","TransactionTable","transactions","length","map","id","transactionDate","type","categoryId","comment","amount","balanceAfter","find","category","name","ModalAddTransaction","onClose","useSelector","useState","setTransactionDate","dispatch","useDispatch","validationSchema","yup","required","useFormik","initialValues","onSubmit","newTransaction","Number","console","log","addTransaction","resetForm","handleSubmit","values","handleChange","errors","autoComplete","value","onChange","reduce","acc","categori","push","placeholder","evt","_d","onClick","modalIsOpen","setModalIsOpen","selectTransaction","useEffect","getCategories"],"sourceRoot":""}